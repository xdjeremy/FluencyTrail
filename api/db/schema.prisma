// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                  Int       @id @default(autoincrement())
  email               String    @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  Activity Activity[]
}

model Activity {
  id           String       @id @default(uuid())
  userId       Int
  activityType ActivityType
  notes        String?
  duration     Int?
  date         DateTime     @default(now()) @db.Date
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum ActivityType {
  WATCHING
  READING
  LISTENING
  GRAMMAR
  VOCABULARY
  WRITING
  PLAYING
  OTHER
}

model Media {
  id            String    @id @default(uuid())
  externalId    String    @unique
  title         String
  mediaType     MediaType
  originalTitle String?
  description   String?
  posterUrl     String?
  backdropUrl   String?
  popularity    Float?
  releaseDate   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  MovieMetadata MovieMetadata?

  @@unique([externalId, mediaType])
}

enum MediaType {
  MOVIE
  TV
  BOOK
}

model MovieMetadata {
  mediaId          String   @id @unique
  adult            Boolean?
  originalLanguage String?
  genres           String[]
  runtime          Int?
  rawData          Json

  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)
}
