// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                              Int       @id @default(autoincrement())
  email                           String    @unique
  name                            String?
  hashedPassword                  String?
  salt                            String?
  resetToken                      String?
  resetTokenExpiresAt             DateTime?
  emailVerified                   Boolean   @default(false)
  emailVerificationToken          String?
  emailVerificationTokenExpiresAt DateTime?
  timezone                        String? // Make timezone non-nullable
  createdAt                       DateTime  @default(now())
  updatedAt                       DateTime  @updatedAt

  Activity Activity[]
  OAuth    OAuth[]
}

model OAuth {
  provider         String
  // The ID of the user on the OAuth provider's system
  providerUserId   String
  // The username of the user on the OAuth provider's system. Useful for helping users identify their linked accounts
  providerUsername String
  // The below two fields should be in reference to whatever your user model is
  user             User   @relation(fields: [userId], references: [id])
  userId           Int

  createdAt DateTime @default(now())

  @@unique([provider, providerUserId])
  @@unique([userId, provider])
  @@index([userId])
}

model Activity {
  id           String       @id @default(uuid())
  userId       Int?
  activityType ActivityType
  mediaId      String?
  notes        String?
  duration     Int?
  date         DateTime     @default(now())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  user  User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  media Media? @relation(fields: [mediaId], references: [id], onDelete: SetNull)
}

enum ActivityType {
  WATCHING
  READING
  LISTENING
  GRAMMAR
  VOCABULARY
  WRITING
  PLAYING
  OTHER
}

model Media {
  id            String    @id @default(uuid())
  slug          String    @unique
  externalId    String    @unique
  title         String
  mediaType     MediaType
  originalTitle String?
  description   String?
  posterUrl     String?
  backdropUrl   String?
  popularity    Float?
  releaseDate   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  MovieMetadata MovieMetadata?
  TvMetadata    TvMetadata?
  Activity      Activity[]

  @@unique([externalId, mediaType])
}

enum MediaType {
  MOVIE
  TV
  BOOK
}

model MovieMetadata {
  mediaId          String   @id @unique
  adult            Boolean?
  originalLanguage String?
  genres           String[]
  runtime          Int?
  rawData          Json

  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)
}

model TvMetadata {
  mediaId          String    @id @unique
  adult            Boolean?
  originalLanguage String?
  genres           String[]
  firstAirDate     DateTime?
  lastAirDate      DateTime? // Added
  numberOfSeasons  Int? // Added
  numberOfEpisodes Int? // Added
  status           String? // Added (e.g., "Returning Series", "Ended")
  originalCountry  String[]

  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)
}
